{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACjCC,EAAgBF,SAASC,cAAc,gBACvCE,EAAeH,SAASC,cAAc,eACtCG,EAAiBJ,SAASC,cAAc,iBAqB9C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5BbR,EAAQgB,iBAAiB,UAAWC,IAClCA,EAAMC,iBACN,IAAIC,EAAgB,EAChBC,EAAQC,OAAOlB,EAAcmB,OACjC,MAAMC,EAAOF,OAAOjB,EAAakB,OAC3BE,EAASH,OAAOhB,EAAeiB,OACrC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EACpCC,MAAM,wCAGR,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAC/BP,GAAiB,EACjBb,EAAca,EAAeC,GAC1BO,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,KAAYV,EAAA8B,OAAOC,QAAQ,uBAAqBtB,QAAiBC,MAAW,CAAGD,SAAU,oBACzGuB,OAAI,EAACvB,SAAEA,EAAQC,MAAEA,KAAYV,EAAA8B,OAAOG,QAAQ,sBAAoBxB,QAAeC,MAAW,CAAGD,SAAU,oBAC1Ga,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio'; \n\nconst formRef = document.querySelector(\".form\");\nconst inputDelayRef = document.querySelector(\"[name=delay]\");\nconst inputStepRef = document.querySelector(\"[name=step]\");\nconst inputAmountRef = document.querySelector(\"[name=amount]\");\n\nformRef.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  let numOfPosition = 0;\n  let delay = Number(inputDelayRef.value);\n  const step = Number(inputStepRef.value);\n  const amount = Number(inputAmountRef.value);\n  if (delay < 0 || step < 0 || amount < 0) {\n    alert(\"You can't use negative numbers!\");\n    return\n  };\n  for (let i = 0; i < amount; i += 1){\n    numOfPosition += 1;\n    createPromise(numOfPosition, delay)\n      .then(({ position, delay }) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {position: 'center-center'}))\n      .catch(({ position, delay }) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {position: 'center-center'}))\n      delay += step;\n  }\n});\n  \nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$inputDelayRef","$47d4ff9957288465$var$inputStepRef","$47d4ff9957288465$var$inputAmountRef","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","numOfPosition","delay1","Number","value","step","amount","alert","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.6476ad0b.js.map"}